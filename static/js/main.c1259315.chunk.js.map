{"version":3,"sources":["BoardManagement/BoardBuilder.js","BoardManagement/BoardPrinter.js","BoardManagement/Board.js","BoardManagement/BoardManager.js","App.js","reportWebVitals.js","index.js"],"names":["BoardBuilder","buildPiece","id","team","position","this","Array","undefined","board","row","column","pieces","BoardPrinter","props","backgroundColor","piece","class","className","boardJSX","current","square","Component","Board","boardArray","data","whitePieces","blackPieces","BoardManager","printBoard","buildBoard","App","state","turn","menu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1259315.chunk.js","sourcesContent":["// BoardBuilder is called when the match starts.\r\n// It builds the board by creating the pieces (calls other classes for that) and puts them in the instance of the Board class.\r\n\r\n// The way pieces id work:\r\n// King = 0\r\n// Queen = 1\r\n// Rook = 2\r\n// Bishop = 3\r\n// Knight = 4\r\n// Pawn = 5\r\n// Blank_space = 6\r\n\r\nclass BoardBuilder {\r\n    constructor() {\r\n        this.position = new Array(2);\r\n        this.team = undefined;\r\n    }\r\n\r\n    buildBoard() {\r\n        const size = 8;\r\n        let board = new Array(size);\r\n\r\n        for (let row = 0; row < size; row++) {\r\n            board[row] = new Array(size);\r\n\r\n            for (let column = 0; column < size; column++) {\r\n                this.position = [row, column];\r\n\r\n                if (row <= 1 || row >= 6) {\r\n                    this.team = row < 4;\r\n\r\n                    if (row == 0 || row == 7) {\r\n\r\n                        // Creates rooks\r\n                        if (column == 0 || column == 7)\r\n                            board[row][column] = this.buildPiece(2);\r\n\r\n                        // Creates knights\r\n                        else if (column == 1 || column == 6)\r\n                            board[row][column] = this.buildPiece(4);\r\n\r\n                        // Creates bishops\r\n                        else if (column == 2 || column == 5)\r\n                            board[row][column] = this.buildPiece(3);\r\n\r\n                        // Creates queen\r\n                        else if (column == 3)\r\n                            board[row][column] = this.buildPiece(1);\r\n\r\n                        // Creates king\r\n                        else\r\n                            board[row][column] = this.buildPiece(0);\r\n\r\n                    }\r\n                    // Creates pawn\r\n                    else\r\n                        board[row][column] = this.buildPiece(5);\r\n                }\r\n                // Creates empty\r\n                else {\r\n                    this.team = undefined;\r\n                    board[row][column] = this.buildPiece(6);\r\n                }\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    buildPiece = (id) => ({\r\n        \"id\": id,\r\n        \"team\": this.team,\r\n        \"position\": this.position\r\n    });\r\n}\r\n\r\nexport default BoardBuilder;","import React, { Component } from \"react\";\r\n\r\n// The current showing pieces for each team.\r\n\r\nconst emptyCharacter = \"\\0\";\r\n\r\nconst piecesBlack = ['♚', '♛', '♜', '♞', '♝', '♟', emptyCharacter];\r\nconst piecesWhite = ['♔', '♕', '♖', '♘', '♗', '♙', emptyCharacter];\r\n\r\nconst pieces = [piecesBlack, piecesWhite];\r\n\r\n// BoardPrinter transforms the raw data of the board into JSX objects.\r\n// It's called after the information is already processed and only needs to be rendered\r\n\r\nclass BoardPrinter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.board = this.props.board;\r\n    }\r\n\r\n    backgroundColor = (position) => (position[0] % 2 == 0 && position[1] % 2 != 0) || (position[0] % 2 != 0 && position[1] % 2 == 0) ? 1 : 2;\r\n\r\n    square(piece, position) {\r\n        return (\r\n            <button class={\"flex-grow-1 p-2 square-size bgc-\" + this.backgroundColor(position) + \" \" + (piece.team ? \"dark\" : \"light\")}>\r\n                <div className=\"center-text\">{pieces[piece.team ? 0 : 1][piece.id]}</div>\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let boardJSX = new Array(8);\r\n        let current = undefined;\r\n\r\n        for (let row = 0; row < 8; row++) {\r\n            current = new Array(8);\r\n            for (let column = 0; column < 8; column++) {\r\n                current[column] = this.square(this.board[row][column], [row, column]);\r\n            }\r\n            boardJSX[row] = (\r\n                <div className=\"d-flex justify-content-center\">\r\n                    {current}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {boardJSX}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardPrinter;","// Board is the object class that holds info about the current state of the board.\r\n// Other classes operates based on the information stored in the object of this class.\r\n\r\nclass Board {\r\n    constructor(boardArray) {\r\n        // Gets the intial information of the chess board.\r\n        // Declares the arrays that will keep track of the current pieces. \r\n\r\n        this.data = boardArray;\r\n\r\n        this.whitePieces = new Array(16);\r\n        this.blackPieces = new Array(16);\r\n    }\r\n}\r\n\r\nexport default Board;","import BoardBuilder from \"./BoardBuilder\";\r\nimport BoardPrinter from \"./BoardPrinter\";\r\nimport Board from \"./Board\";\r\n\r\n// BoardManager takes care of updating the data of the Board instance.\r\n\r\nclass BoardManager {\r\n    constructor() {\r\n        this.board = new Board(new BoardBuilder().buildBoard());\r\n    }\r\n\r\n    printBoard = () => <BoardPrinter board={this.board.data}/>;\r\n}\r\n\r\nexport default BoardManager;","import React, { Component } from \"react\";\nimport BoardManager from \"./BoardManagement/BoardManager\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.board = new BoardManager();\n\n        this.state = {\n        }\n    }\n\n    menu() {\n        return (\n            <div>\n                <p className=\"display-3\">{this.state.turn ? \"White\" : \"Black\"} to play</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"App display-3\">\n                <div className=\"row\">\n                    {this.menu()}\n                </div>\n                <div className=\"d-flex flex-row\">\n                    <div className=\"flex-column flex-fill mobile-show\"></div>\n                    <div className=\"flex-column flex-fill center-text\">\n                        {this.board.printBoard()}\n                    </div>\n                    <div className=\"flex-column flex-fill mobile-show\"></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}