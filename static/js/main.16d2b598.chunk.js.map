{"version":3,"sources":["PieceManangement/Movements.js","PieceManangement/BasePiece.js","PieceManangement/Pieces/King.js","PieceManangement/Pieces/Queen.js","PieceManangement/Pieces/Rook.js","PieceManangement/Pieces/Bishop.js","PieceManangement/Pieces/Knight.js","PieceManangement/Pieces/Pawn.js","PieceManangement/PieceManager.js","BoardManagement/BoardBuilder.js","BoardManagement/BoardPrinter.js","BoardManagement/Board.js","BoardManagement/BoardManager.js","Misc/Debugging.js","App.js","reportWebVitals.js","index.js"],"names":["Movements","BasePiece","piece","isBlank","team","isSameType","id","isSameTeam","isSamePiece","position","this","hasMoved","legalMovements","caller","target","board","Error","moves","pieceObjects","checkMove","newPosition","PieceManager","buildPiece","pieceManager","BoardBuilder","Array","undefined","row","column","emptyCharacter","piecesBlack","pieces","BoardPrinter","props","backgroundColor","console","log","class","onClick","className","boardJSX","current","square","Component","Board","boardArray","get","data","debug","constructor","name","BoardManager","printBoard","object","callMovement","buildBoard","clear","movementData","boardData","movePiece","App","state","turn","menu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16d2b598.chunk.js","sourcesContent":["// This class will contain the necessary information about whether a movement is legal or not for a piece.\r\n// The directions array works the following way:\r\n// north, east, south, west = 0,1,2,3\r\n// north-west, north-east, south-east, south-west = 4,5,6,7\r\n\r\nclass Movements {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    checkMoves() {\r\n\r\n    }\r\n}\r\n\r\nexport default Movements;","import Movements from \"./Movements\";\r\n\r\n// The way pieces id work:\r\n// King = 0\r\n// Queen = 1\r\n// Rook = 2\r\n// Bishop = 3\r\n// Knight = 4\r\n// Pawn = 5\r\n// Blank_space = 6\r\n\r\n// Piece object format:\r\n// id: identifies the piece\r\n// team: the team of the piece\r\n// general example: \r\n// piece = {\r\n//     \"id\": 0-6,\r\n//     \"team\": 0-2,\r\n//     ?\"pos\": [0-7,0-7]?\r\n// }\r\n\r\n\r\nclass BasePiece {\r\n    constructor(piece) {\r\n        this.id = piece.id;\r\n        this.team = piece.team;\r\n        this.position = piece.position;\r\n        this.hasMoved = false;\r\n        this.legalMovements = new Movements();\r\n        this.caller = piece.caller;\r\n    }\r\n\r\n    // QoL methods for cheking\r\n\r\n    isBlank = () => this.team == 2;\r\n    isSameType = (id) => this.id == id;\r\n    isSameTeam = (team) => this.team == team;\r\n    isSamePiece = (position) => this.position == position;\r\n\r\n    // Move method\r\n\r\n    checkMove(target, board) {\r\n        throw new Error(\"checkMove(newPosition, board) not implemented\");\r\n    }\r\n}\r\n\r\nexport default BasePiece;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [1, 1, 1, 1, 1, 1, 1, 1];\r\n\r\nclass King extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove(target, board) {\r\n        // 3 - 2 == 1 -> target[0] - this.position[0] >= 1 -> true\r\n        // 2 - 3 == -1 -> target[0] - this.position[0] <= -1 -> true\r\n        // 5 - 2 == 3 -> target[0] - this.position[0] <= 1 -> false\r\n        // 2 - 5 == -3 -> target[0] - this.position[0] >= 1 -> false\r\n\r\n        // console.log(\"Calc: \");\r\n        // console.log(target[0] - this.position[0]);\r\n\r\n        if ((target.position[0] - this.position[0] > 1 || target.position[0] - this.position[0] < -1) ||\r\n            (target.position[1] - this.position[1] > 1 || target.position[1] - this.position[1] < -1))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default King;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [8, 8, 8, 8, 8, 8, 8, 8];\r\n\r\n// For the bishop, the difference of the old coordinates to the new ones should be equal in terms of x/y.\r\n\r\nclass Queen extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove = (newPosition, board) => true;\r\n}\r\n\r\nexport default Queen;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [8, 8, 8, 8, 0, 0, 0, 0];\r\n\r\n// For the bishop, the difference of the old coordinates to the new ones should be equal in terms of x/y.\r\n\r\nclass Rook extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove = (newPosition, board) => true;\r\n}\r\n\r\nexport default Rook;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [0, 0, 0, 0, 8, 8, 8, 8];\r\n\r\n// For the bishop, the difference of the old coordinates to the new ones should be equal in terms of x/y.\r\n\r\nclass Bishop extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove = (newPosition, board) => true;\r\n}\r\n\r\nexport default Bishop;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [1, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n// For the bishop, the difference of the old coordinates to the new ones should be equal in terms of x/y.\r\n\r\nclass Knight extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove = (newPosition, board) => true;\r\n}\r\n\r\nexport default Knight;","import BasePiece from \"../BasePiece\";\r\n\r\nconst moves = [1, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n// For the bishop, the difference of the old coordinates to the new ones should be equal in terms of x/y.\r\n\r\nclass Pawn extends BasePiece {\r\n    constructor(piece) {\r\n        super(piece, moves);\r\n\r\n    }\r\n\r\n    checkMove(newPosition, board) {\r\n        let target = board[newPosition[0]][newPosition[1]];\r\n        if (newPosition[1] != this.position[1]) return false;\r\n    }\r\n}\r\n\r\nexport default Pawn;","import King from \"../PieceManangement/Pieces/King\";\r\nimport Queen from \"../PieceManangement/Pieces/Queen\";\r\nimport Rook from \"../PieceManangement/Pieces/Rook\";\r\nimport Bishop from \"../PieceManangement/Pieces/Bishop\";\r\nimport Knight from \"../PieceManangement/Pieces/Knight\";\r\nimport Pawn from \"../PieceManangement/Pieces/Pawn\";\r\nimport BasePiece from \"../PieceManangement/BasePiece\";\r\n\r\nconst pieceObjects = [King, Queen, Rook, Bishop, Knight, Pawn, BasePiece];\r\n\r\n// Manages operations related to pieces.\r\n\r\nclass PieceManager {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    // Returns a new piece instance with its respective data.\r\n    buildPiece = (id, team, position) => new pieceObjects[id](\r\n        {\r\n            \"id\": id, // ID defines what piece it is.\r\n            \"team\": team, // true = black, false = white, undefined = neutral.\r\n            \"position\": position // Position for movement checking.\r\n        }\r\n    );\r\n}\r\n\r\nexport default PieceManager;","import PieceManager from \"../PieceManangement/PieceManager\";\r\n\r\n// BoardBuilder is called when the match starts.\r\n// It builds the board by creating the pieces (calls other classes for that) and puts them in the instance of the Board class.\r\n\r\n// The way pieces id work:\r\n// King = 0\r\n// Queen = 1\r\n// Rook = 2\r\n// Bishop = 3\r\n// Knight = 4\r\n// Pawn = 5\r\n// Blank_space = 6\r\n\r\nconst pieceManager = new PieceManager();\r\n\r\nclass BoardBuilder {\r\n    constructor() {\r\n        this.position = new Array(2);\r\n        this.team = undefined;\r\n    }\r\n\r\n    buildBoard() {\r\n        const size = 8;\r\n        let board = new Array(size);\r\n\r\n        // Rows.\r\n        for (let row = 0; row < size; row++) {\r\n            board[row] = new Array(size);\r\n\r\n            // Columns.\r\n            for (let column = 0; column < size; column++) {\r\n                this.position = [row, column];\r\n\r\n                // The white and black ranks.\r\n                if (row <= 1 || row >= 6) {\r\n                    this.team = row < 4; // Defines whether it's the white or black rank.\r\n\r\n                    // Back Ranks.\r\n                    if (row == 0 || row == 7) {\r\n\r\n                        // Creates rooks.\r\n                        if (column == 0 || column == 7)\r\n                            board[row][column] = this.buildPiece(2);\r\n\r\n                        // Creates knights.\r\n                        else if (column == 1 || column == 6)\r\n                            board[row][column] = this.buildPiece(3);\r\n\r\n                        // Creates bishops.\r\n                        else if (column == 2 || column == 5)\r\n                            board[row][column] = this.buildPiece(4);\r\n\r\n                        // Creates queen.\r\n                        else if (column == 3)\r\n                            board[row][column] = this.buildPiece(1);\r\n\r\n                        // Creates king.\r\n                        else\r\n                            board[row][column] = this.buildPiece(0);\r\n                    }\r\n\r\n                    // Front ranks.\r\n                    else {\r\n                        if (!true) {\r\n                            // Creates pawn.\r\n                            board[row][column] = this.buildPiece(5);\r\n                        }\r\n\r\n                        // Incase I want to remove the pawn rank.\r\n                        else {\r\n                            this.team = undefined;\r\n                            board[row][column] = this.buildPiece(6);\r\n                        }\r\n                    }\r\n                }\r\n                // Creates empty.\r\n                else {\r\n                    this.team = undefined;\r\n                    board[row][column] = this.buildPiece(6);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Raw data of the board. JSX&cia are processed in the BoardPrinter.\r\n        return board;\r\n    }\r\n\r\n    buildPiece(id){\r\n        return pieceManager.buildPiece(id, this.team, this.position);\r\n    }\r\n}\r\n\r\nexport default BoardBuilder;","import React, { Component } from \"react\";\r\n\r\n// The current showing pieces for each team.\r\n\r\nconst style = true;\r\nconst emptyCharacter = <span>&nbsp;</span>;\r\n\r\nconst piecesBlack = style ? ['♚', '♛', '♜', '♞', '♝', '♟', emptyCharacter] : ['@', '¥', '][', '&', 'Í', '¡', emptyCharacter];\r\nconst piecesWhite = style ? ['♔', '♕', '♖', '♘', '♗', '♙', emptyCharacter] : piecesBlack;\r\n\r\nconst pieces = [piecesBlack, piecesWhite];\r\n\r\n// BoardPrinter transforms the raw data of the board into JSX objects.\r\n// It's called after the information is already processed and only needs to be rendered\r\n\r\nclass BoardPrinter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.board = this.props.board;\r\n    }\r\n\r\n    backgroundColor = (position) => (position[0] % 2 == 0 && position[1] % 2 != 0) || (position[0] % 2 != 0 && position[1] % 2 == 0) ? 1 : 2;\r\n\r\n    square(piece, position) {\r\n        console.log(piece);\r\n        return (\r\n            <button class={\"flex-grow-1 p-2 square-size bgc-\" + this.backgroundColor(position) + \" \" + (piece.team ? \"dark\" : \"light\")} onClick={() => this.props.caller(piece)}>\r\n                <div className=\"center-text\">{pieces[piece.team ? 0 : 1][piece.id]}</div>\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let boardJSX = new Array(8);\r\n        let current = undefined;\r\n\r\n        for (let row = 0; row < 8; row++) {\r\n            current = new Array(8);\r\n            for (let column = 0; column < 8; column++) {\r\n                current[column] = this.square(this.board[row][column], [row, column]);\r\n            }\r\n            boardJSX[row] = (\r\n                <div className=\"d-flex justify-content-center\">\r\n                    {current}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {boardJSX}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardPrinter;","// Board is the object class that holds info about the current state of the board.\r\n// Other classes operates based on the information stored in the object of this class.\r\n\r\nclass Board {\r\n    constructor(boardArray) {\r\n        // Gets the intial information of the chess board.\r\n        // Declares the arrays that will keep track of the current pieces.\r\n\r\n        this.data = boardArray;\r\n    }\r\n\r\n    get = (row, column) =>\r\n    (\r\n        row == undefined ?\r\n            this.data :\r\n            (\r\n                column == undefined ?\r\n                    this.data[row] :\r\n                    this.data[row][column]\r\n            )\r\n    );\r\n}\r\n\r\nexport default Board;","import PieceManager from \"../PieceManangement/PieceManager\";\r\nimport BoardBuilder from \"./BoardBuilder\";\r\nimport BoardPrinter from \"./BoardPrinter\";\r\nimport Board from \"./Board\";\r\nimport Debugger from \"../Misc/Debugging\";\r\n\r\n// BoardManager takes care of updating the data of the Board instance.\r\n\r\nconst debug = new Debugger();\r\n\r\nclass BoardManager {\r\n    constructor() {\r\n        this.board = new Board(new BoardBuilder(this.callMovement).buildBoard());\r\n        // let p = [0, 4];\r\n        // let t = [p[0] + 1, p[1] + 1];\r\n        // this.movementProcessor(this.board.get(p[0], p[1]), this.board.get(t[0], t[1]));\r\n    }\r\n\r\n    callMovement(object) {\r\n        console.log(\"Called\");\r\n        console.log(object);\r\n    }\r\n\r\n    movementProcessor(piece, target) {\r\n        // Debug\r\n\r\n        console.clear();\r\n        debug.movementData(this.board, piece, target);\r\n        debug.boardData(this.board, piece);\r\n\r\n        // Move\r\n\r\n        if (piece.team != target.team) {\r\n            if (piece.checkMove(target, this.board.get())) {\r\n                this.movePiece(piece, target);\r\n            }\r\n        }\r\n\r\n        debug.boardData(this.board, target);\r\n    }\r\n\r\n    movePiece(piece, target) {\r\n        this.board.data[target.position[0]][target.position[1]] = piece;\r\n        this.board.data[piece.position[0]][piece.position[1]] = new PieceManager().buildPiece(6, undefined, [piece.position[0], piece.position[1]]);\r\n    }\r\n\r\n    printBoard = () => <BoardPrinter board={this.board.data} caller={(object) => this.callMovement(object)}/>;\r\n}\r\n\r\nexport default BoardManager;","\r\n\r\nclass Debugger {\r\n    boardData(board, piece) {\r\n        console.log(\"\\nBoard Data => {\\n\");\r\n        console.log(\"Data about: \" + piece.constructor.name);\r\n        console.log(board.get());\r\n        console.log(board.get(piece.position[0]));\r\n        console.log(board.get(piece.position[0], piece.position[1]));\r\n        console.log(\"}\");\r\n    }\r\n\r\n    movementData(board, piece, target) {\r\n        console.log(\"Movement Data => {\");\r\n        console.log(\"Piece moving: \" + piece.constructor.name + \" \" + (piece.team == undefined ? \"neutral\" : (piece.team ? \"black\" : \"white\")));\r\n        console.log(piece.position);\r\n        console.log(\"\\nTarget: \" + target.constructor.name + \" \" + (target.team == undefined ? \"neutral\" : (target.team ? \"black\" : \"white\")));\r\n        console.log(target.position);\r\n        console.log(\"\\nStatus: \" + piece.checkMove(target, board.get()));\r\n        console.log(\"}\");\r\n    }\r\n}\r\n\r\nexport default Debugger;","import React, { Component } from \"react\";\nimport BoardManager from \"./BoardManagement/BoardManager\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.board = new BoardManager();\n\n        this.state = {\n        }\n    }\n\n    menu() {\n        return (\n            <div>\n                <p className=\"display-3\">{this.state.turn ? \"White\" : \"Black\"} to play</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"App display-3\">\n                <div className=\"row\">\n                    {this.menu()}\n                </div>\n                <div className=\"d-flex flex-row\">\n                    <div className=\"flex-column flex-fill mobile-show\"></div>\n                    <div className=\"flex-column flex-fill center-text\">\n                        {this.board.printBoard()}\n                    </div>\n                    <div className=\"flex-column flex-fill mobile-show\"></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}